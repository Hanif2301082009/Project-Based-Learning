services:

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "5000:5000"
    environment:
      - eureka.client.service-url.defaultZone=http://eurekaserver:8761/eureka/
      - LOGSTASH_HOST=logstash:5000   
    depends_on:
      - eurekaserver
    networks:
      - microservices-net

  laravel:
    build: ./envirotech-nf
    container_name: laravel
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./envirotech-nf:/var/www
    ports:
      - "9000:9000"
    networks:
      - microservices-net


  nginx:
   image: nginx:latest
   container_name: laravel-nginx
   ports:
     - "8091:80"
   volumes:
     - ./envirotech-nf:/var/www
     - ./nginx.conf:/etc/nginx/conf.d/default.conf
   depends_on:
     - laravel
   networks:
     - microservices-net

  temperature-service:
    build: ./temperature-service
    container_name: temperature-service
    ports:
      - "5001:5001"
    environment:
      - spring.datasource.url=jdbc:mysql://mysql1:3306/dbhidro_suhu?useSSL=false&serverTimezone=UTC
      - spring.datasource.username=root
      - spring.datasource.password=root_password
      - eureka.client.service-url.defaultZone=http://eurekaserver:8761/eureka/
      - LOGSTASH_HOST=logstash:5000   
    depends_on:
      - eurekaserver
      - mysql1
    networks:
      - microservices-net
      
  tds-service:
    build: ./tds-service
    container_name: tds-service
    ports:
      - "5002:5002"
    environment:
      - spring.datasource.url=jdbc:mysql://mysql2:3306/dbhidro_tds?useSSL=false&serverTimezone=UTC
      - spring.datasource.username=root
      - spring.datasource.password=root_password
      - eureka.client.service-url.defaultZone=http://eurekaserver:8761/eureka/
      - LOGSTASH_HOST=logstash:5000   
    depends_on:
      - eurekaserver
      - mysql2
    networks:
      - microservices-net

  ph-service:
    build: ./ph-service
    container_name: ph-service
    ports:
      - "5003:5003"
    environment:
      - spring.datasource.url=jdbc:mysql://mysql3:3306/dbhidro_ph?useSSL=false&serverTimezone=UTC
      - spring.datasource.username=root
      - spring.datasource.password=root_password
      - eureka.client.service-url.defaultZone=http://eurekaserver:8761/eureka/
      - LOGSTASH_HOST=logstash:5000   
    depends_on:
      - eurekaserver
      - mysql3
    networks:
      - microservices-net

  eurekaserver:
    build: ./eurekaserver
    container_name: eurekaserver
    ports:
      - "8761:8761"
    networks:
      - microservices-net

  # rabbitmq:
  #   image: rabbitmq:3-management
  #   container_name: rabbitmq
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   networks:
  #     - microservices-net

  # mysql:
  #   image: mysql:8.0
  #   container_name: mysql
  #   environment:
  #     MYSQL_ROOT_PASSWORD: root_password
  #   volumes:
  #     - ./mysql/init:/docker-entrypoint-initdb.d  # Mount script ke direktori init
  #   ports:
  #     - "3306:3306"
  #   networks:
  #     - microservices-net

  mysql1:
    image: mysql:8.0
    container_name: mysql1
    environment:
      MYSQL_ROOT_PASSWORD: root_password
    volumes:
      - mysql1-data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"  # Tetap gunakan 3306 untuk mysql1
    networks:
      - microservices-net

  mysql2:
    image: mysql:8.0
    container_name: mysql2
    environment:
      MYSQL_ROOT_PASSWORD: root_password
    volumes:
      - mysql2-data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "3307:3306"  # 3307 di host, 3306 di dalam container
    networks:
      - microservices-net

  mysql3:
    image: mysql:8.0
    container_name: mysql3
    environment:
      MYSQL_ROOT_PASSWORD: root_password
    volumes:
      - mysql3-data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "3308:3306"  # 3308 di host, 3306 di dalam container
    networks:
      - microservices-net

  # phpmyadmin:
  #   image: phpmyadmin/phpmyadmin
  #   container_name: phpmyadmin
  #   environment:
  #     PMA_HOST: mysql  # Nama service MySQL di Docker Compose
  #     PMA_PORT: 3306
  #     PMA_USER: root
  #     PMA_PASSWORD: root_password
  #   ports:
  #     - "8085:80"  # Akses phpMyAdmin via port 8085
  #   networks:
  #     - microservices-net
  #   depends_on:
  #     - mysql

  phpmyadmin1:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin1
    environment:
      PMA_HOST: mysql1  # Nama service MySQL di Docker Compose
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: root_password
    ports:
      - "8085:80"  # Akses phpMyAdmin via port 8085
    networks:
      - microservices-net
    depends_on:
      - mysql1

  phpmyadmin2:
      image: phpmyadmin/phpmyadmin
      container_name: phpmyadmin2
      environment:
        PMA_HOST: mysql2  # Nama service MySQL di Docker Compose
        PMA_PORT: 3306
        PMA_USER: root
        PMA_PASSWORD: root_password
      ports:
        - "8086:80"  # Akses phpMyAdmin via port 8086
      networks:
        - microservices-net
      depends_on:
        - mysql2

  phpmyadmin3:
      image: phpmyadmin/phpmyadmin
      container_name: phpmyadmin3
      environment:
        PMA_HOST: mysql3  # Nama service MySQL di Docker Compose
        PMA_PORT: 3306
        PMA_USER: root
        PMA_PASSWORD: root_password
      ports:
        - "8087:80"  # Akses phpMyAdmin via port 8087
      networks:
        - microservices-net
      depends_on:
        - mysql3

  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #   networks:
  #     - microservices-net

  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   networks:
  #     - microservices-net

  # node-exporter:
  #   image: prom/node-exporter
  #   container_name: node-exporter
  #   ports:
  #     - "9100:9100"
  #   networks:
  #     - microservices-net

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
  #   container_name: elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #     - bootstrap.memory_lock=true
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ports:
  #     - "9200:9200"
  #   volumes:
  #     - esdata:/usr/share/elasticsearch/data
  #   networks:
  #     - microservices-net

  # logstash:
  #   image: docker.elastic.co/logstash/logstash:8.12.0
  #   container_name: logstash
  #   depends_on:
  #     - elasticsearch
  #   ports:
  #     - "5044:5044"      # Beat input (optional)
  #     - "5001:5000"      # TCP input (Spring Boot logs via logstashTcpSocketAppender)
  #     - "9600:9600"      # Logstash monitoring API
  #   volumes:
  #     - ./logstash/pipeline:/usr/share/logstash/pipeline
  #   networks:
  #     - microservices-net
  
  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.17.10
  #   container_name: kibana
  #   ports:
  #     - "5601:5601"
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - microservices-net

networks:
  microservices-net:
    driver: bridge
 
volumes:
  esdata:
  mysql1-data:
  mysql2-data:
  mysql3-data: